// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
        IN  
            x[16], y[16],  // 16-bit inputs        
            zx, // zero the x input?
            nx, // negate the x input?
            zy, // zero the y input?
            ny, // negate the y input?
            f,  // compute (out = x + y) or (out = x & y)?
            no; // negate the out output?
        OUT 
            out[16], // 16-bit output
            zr,      // if (out == 0) equals 1, else 0
            ng;      // if (out < 0)  equals 1, else 0

        PARTS:
        Mux16(a= x, b= false, sel= zx, out= newX); // for zx
        Not16(in= newX, out= notX); // for nx
        Mux16(a= newX, b= notX, sel= nx, out= finalX); // selecting if nx is needed
        Mux16(a= y, b= false, sel= zy, out= newY); // for zy
        Not16(in= newY, out= notY); // for ny
        Mux16(a= newY, b= notY, sel= ny, out= finalY); // selecting if ny is neeeded
        Add16(a= finalX, b= finalY, out= sumXY); // sum of x and y
        And16(a= finalX, b= finalY, out= andXY); // and of x and y
        Mux16(a= andXY, b= sumXY, sel= f, out= outF); // selecting sum/and based on f
        Not16(in= outF, out= notOutF); // negating the above output for no
        Mux16(a= outF, b= notOutF, sel= no, out= out, out[0..7]= lowerOut, out[8..15]= higherOut, out[15]= outMSB); // selecting the output based on no, also stroing lower, upper and msb for zr and ng
        Or8Way(in= lowerOut, out= outZr1); // to calculate if all lower bits are 0's
        Or8Way(in= higherOut, out= outZr2); // to calculate if all upper bits are 0's
        Or(a= outZr1, b= outZr2, out= outZr3); // check if there is atleast one 1
        Not(in= outZr3, out= zr); // if there is no 1, then set zr to 0
        Or(a= outMSB, b= false, out= ng); // set ng to 1 if there is 1 in msb
}
